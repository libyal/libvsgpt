.Dd January 21, 2021
.Dt libvsgpt 3
.Os libvsgpt
.Sh NAME
.Nm libvsgpt.h
.Nd Library to access the GUID Partition Table (GPT) volume system format
.Sh SYNOPSIS
.In libvsgpt.h
.Pp
Support functions
.Ft const char *
.Fn libvsgpt_get_version "void"
.Ft int
.Fn libvsgpt_get_access_flags_read "void"
.Ft int
.Fn libvsgpt_get_access_flags_read_write "void"
.Ft int
.Fn libvsgpt_get_access_flags_write "void"
.Ft int
.Fn libvsgpt_get_codepage "int *codepage" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_set_codepage "int codepage" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_check_volume_signature "const char *filename" "libvsgpt_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libvsgpt_check_volume_signature_wide "const wchar_t *filename" "libvsgpt_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libvsgpt_check_volume_signature_file_io_handle "libbfio_handle_t *file_io_handle" "libvsgpt_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libvsgpt_notify_set_verbose "int verbose"
.Ft int
.Fn libvsgpt_notify_set_stream "FILE *stream" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_notify_stream_open "const char *filename" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_notify_stream_close "libvsgpt_error_t **error"
.Pp
Error functions
.Ft void
.Fn libvsgpt_error_free "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_error_fprint "libvsgpt_error_t *error" "FILE *stream"
.Ft int
.Fn libvsgpt_error_sprint "libvsgpt_error_t *error" "char *string" "size_t size"
.Ft int
.Fn libvsgpt_error_backtrace_fprint "libvsgpt_error_t *error" "FILE *stream"
.Ft int
.Fn libvsgpt_error_backtrace_sprint "libvsgpt_error_t *error" "char *string" "size_t size"
.Pp
Volume functions
.Ft int
.Fn libvsgpt_volume_initialize "libvsgpt_volume_t **volume" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_free "libvsgpt_volume_t **volume" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_signal_abort "libvsgpt_volume_t *volume" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_open "libvsgpt_volume_t *volume" "const char *filename" "int access_flags" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_close "libvsgpt_volume_t *volume" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_get_bytes_per_sector "libvsgpt_volume_t *volume" "uint32_t *bytes_per_sector" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_get_disk_identifier "libvsgpt_volume_t *volume" "uint8_t *guid_data" "size_t guid_data_size" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_get_number_of_partitions "libvsgpt_volume_t *volume" "int *number_of_partitions" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_get_partition_by_index "libvsgpt_volume_t *volume" "int partition_index" "libvsgpt_partition_t **partition" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_has_partition_with_identifier "libvsgpt_volume_t *volume" "uint32_t entry_index" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_volume_get_partition_by_identifier "libvsgpt_volume_t *volume" "uint32_t entry_index" "libvsgpt_partition_t **partition" "libvsgpt_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libvsgpt_volume_open_wide "libvsgpt_volume_t *volume" "const wchar_t *filename" "int access_flags" "libvsgpt_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libvsgpt_volume_open_file_io_handle "libvsgpt_volume_t *volume" "libbfio_handle_t *file_io_handle" "int access_flags" "libvsgpt_error_t **error"
.Pp
Partition functions
.Ft int
.Fn libvsgpt_partition_free "libvsgpt_partition_t **partition" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_entry_index "libvsgpt_partition_t *partition" "uint32_t *entry_index" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_identifier "libvsgpt_partition_t *partition" "uint8_t *guid_data" "size_t guid_data_size" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_type_identifier "libvsgpt_partition_t *partition" "uint8_t *guid_data" "size_t guid_data_size" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_type "libvsgpt_partition_t *partition" "uint8_t *type" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_volume_offset "libvsgpt_partition_t *partition" "off64_t *volume_offset" "libvsgpt_error_t **error"
.Ft ssize_t
.Fn libvsgpt_partition_read_buffer "libvsgpt_partition_t *partition" "void *buffer" "size_t buffer_size" "libvsgpt_error_t **error"
.Ft ssize_t
.Fn libvsgpt_partition_read_buffer_at_offset "libvsgpt_partition_t *partition" "void *buffer" "size_t buffer_size" "off64_t offset" "libvsgpt_error_t **error"
.Ft off64_t
.Fn libvsgpt_partition_seek_offset "libvsgpt_partition_t *partition" "off64_t offset" "int whence" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_offset "libvsgpt_partition_t *partition" "off64_t *offset" "libvsgpt_error_t **error"
.Ft int
.Fn libvsgpt_partition_get_size "libvsgpt_partition_t *partition" "size64_t *size" "libvsgpt_error_t **error"
.Sh DESCRIPTION
The
.Fn libvsgpt_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or \-1 on error, dependent on the return type.
For the actual return values see "libvsgpt.h".
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libvsgpt can be compiled with wide character support (wchar_t).
.sp
To compile libvsgpt with wide character support use:
.Ar ./configure --enable-wide-character-type=yes
 or define:
.Ar _UNICODE
 or
.Ar UNICODE
 during compilation.
.sp
.Ar LIBVSGPT_WIDE_CHARACTER_TYPE
 in libvsgpt/features.h can be used to determine if libvsgpt was compiled with wide character support.
.Sh BUGS
Please report bugs of any kind on the project issue tracker: https://github.com/libyal/libvsgpt/issues
.Sh AUTHOR
These man pages are generated from "libvsgpt.h".
.Sh COPYRIGHT
Copyright (C) 2019-2022, Joachim Metz <joachim.metz@gmail.com>.
.sp
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libvsgpt.h include file
